// Given a word, write a function to generate all of its unique generalized abbreviations.

//Generalized abbreviation of a word can be generated by replacing each substring of the word by the count of characters in the substring. 
// Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”. 
// After replacing these substrings in the actual word by the count of characters we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.

// My solution
const Deque = require('./collections/deque'); //http://www.collectionsjs.com

const generate_generalized_abbreviation = function(word) {
    const result = [], queue = new Deque(), targetCount = word.length;
    queue.push(word[0]);
    queue.push("1");
    while (queue.length) {
        let currentString = queue.shift();
        const reducer = (acc, char) => isNaN(parseInt(char)) ? acc += 1 : acc += parseInt(char);
        const currentCount = currentString.split("").reduce(reducer, 0);
        if (currentCount < targetCount) {
            queue.push(currentString.concat(word[currentCount]))
            const lastChar = currentString[currentString.length - 1];
            isNaN(parseInt(lastChar)) ? queue.push(currentString.concat("1")) : queue.push(currentString.slice(0, -1).concat(parseInt(lastChar) + 1))
        } else {
            result.push(currentString);
        }
    }
    return result;
};

console.log(`Generalized abbreviation are: ${generate_generalized_abbreviation("BAT")}`)
console.log(`Generalized abbreviation are: ${generate_generalized_abbreviation("code")}`)

// Given solution
const Deque = require('./collections/deque'); //http://www.collectionsjs.com

class AbbreviatedWord {
    constructor(str, start, count) {
        this.str = str;
        this.start = start;
        this.count = count;
    }
}

function generate_generalized_abbreviation(word) {
    let wordLen = word.length,
        result = [];
    const queue = new Deque();
    queue.push(new AbbreviatedWord('', 0, 0));
    while (queue.length > 0) {
        const abWord = queue.shift();
        if (abWord.start === wordLen) {
            if (abWord.count !== 0) {
                abWord.str += abWord.count;
            }
            result.push(abWord.str);
        } else {
            // continue abbreviating by incrementing the current abbreviation count
            queue.push(new AbbreviatedWord(abWord.str, abWord.start + 1, abWord.count + 1));

            // restart abbreviating, append the count and the current character to the string
            if (abWord.count !== 0) {
                abWord.str += abWord.count;
            }

            let newWord = abWord.str + word[abWord.start]
            queue.push(new AbbreviatedWord(newWord, abWord.start + 1, 0));
        }
    }
    return result;
}

console.log(`Generalized abbreviation are: ${generate_generalized_abbreviation('BAT')}`);
console.log(`Generalized abbreviation are: ${generate_generalized_abbreviation('code')}`);

// Recursive solution
function generate_generalized_abbreviation(word) {
    const result = [];
    generate_abbreviation_recursive(word, '', 0, 0, result);
    return result;
}
  
  
function generate_abbreviation_recursive(word, abWord, start, count, result) {
    if (start === word.length) {
        if (count !== 0) {
            abWord += count;
        }
        result.push(abWord);
    } else {
        // continue abbreviating by incrementing the current abbreviation count
        generate_abbreviation_recursive(word, abWord, start + 1, count + 1, result);
    
        // restart abbreviating, append the count and the current character to the string
        if (count !== 0) {
            abWord += count;
        }
        const newWord = abWord + word[start];
        generate_abbreviation_recursive(word, newWord, start + 1, 0, result);
    }
}

console.log(`Generalized abbreviation are: ${generate_generalized_abbreviation('BAT')}`);
console.log(`Generalized abbreviation are: ${generate_generalized_abbreviation('code')}`);

// Time complexity: O(N * 2^N)
// Space complexity: O(N * 2^N)